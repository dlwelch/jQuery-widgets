/* 
autocompletepro 0.0
https://github.com/dlwelch/jQuery-widgets
Copyright © 2014 Dedra L. Welch 
Licensed MIT
*/
$.widget("custom.autocompletepro", $.ui.autocomplete, {
    options: { itemsshown: 0, filter: [], searchfields: [], defaultvalue: [], datasource: [], filtereddatasource: [], autodrop: !1, minLength: 0, categorize: !1, categoryfield: "category" }, _selectedvalue: null, value: function () { return "undefined" === $.type(this._selectedvalue) ? null : this._selectedvalue }, selectitem: function (a) {
        if ($.isArray(a)) {
            var c = this, b = $.grep(this.options.filtereddatasource, function (b, f) { return c._compareObjectKeys(b, a) }); 0 < b.length ? (this.element.val(b[0].label),
            this._selectedvalue = b[0]) : (this.element.val(""), this._selectedvalue = null)
        }
    }, _create: function () {
        var a = this; this.element.addClass("ui-widget"); this._definefiltereddatasource(); this.selectitem(this.options.defaultvalue); this._definesource(); this.options.autodrop && (this.options.minLength = 0, this.element.focus(function (a, b) { $(this).autocompletepro("search", "") })); this.options.change = function (c, b) {
            "" === $.trim(a.element.val()) ? (a.element.val(""), a._selectedvalue = null) : "null" === $.type(a._selectedvalue) ? a.element.val("") :
            a.element.val(a._selectedvalue.label)
        }; this.options.select = function (c, b) { a._selectedvalue = $.extend(!0, {}, b.item); a.options.autodrop && a.element.blur() }; this._super(); this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)")
    }, _renderMenu: function (a, c) { var b = this, d = ""; $.each(c, function (c, e) { e[b.options.categoryfield] != d && b.options.categorize && (a.append("<li class='ui-autocomplete-category'>" + e[b.options.categoryfield] + "</li>"), d = e[b.options.categoryfield]); b._renderItemData(a, e) }) }, _setOption: function (a,
    c) { "source" !== a && "change" !== a && "select" !== a && "filtereddatasource" !== a && "filter" !== a && "defaultvalue" !== a && "autodrop" !== a && "minLength" !== a && "categorize" !== a && ("datasource" === a ? (this._super(a, c), this._definefiltereddatasource(), this.selectitem(this.options.defaultvalue), this._definesource()) : this._super(a, c)) }, _definefiltereddatasource: function () {
        var a = this; this.options.filtereddatasource = 0 < this.options.filter.length ? $.grep(this.options.datasource, function (c, b) { return a._compareObjectKeys(c, a.options.filter) }) :
        $.extend(!0, [], this.options.datasource)
    }, _definesource: function () { var a = this; this.options.source = function (c, b) { var d = "", f = $.grep(this.options.filtereddatasource, function (b, f) { d = b.label; 0 < a.options.searchfields.length && (d = "", $.each(a.options.searchfields, function (a, c) { d += b[c] + " " })); return -1 != d.toUpperCase().indexOf(c.term.toUpperCase()) }); 0 < this.options.itemsshown ? b(f.slice(0, this.options.itemsshown)) : b(f) } }, _compareObjectKeys: function (a, c) {
        for (var b = c.length, d = 0; d < b; d++) {
            var f = !0, e; for (e in c[d]) c[d].hasOwnProperty(e) &&
            a[e] != c[d][e] && (f = !1); if (1 == f) return !0
        } return !1
    }
});
