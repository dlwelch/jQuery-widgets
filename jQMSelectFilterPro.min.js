/* 
jQMSelectFilterPro 0.0
https://github.com/dlwelch/jQuery-widgets
Copyright Â© 2015 Dedra L. Welch 
Licensed MIT
*/
$.widget("custom.jqmselectfilterpro", {
    options: { searchprompt: null, maxitems: 0, categoryfield: null, filterReveal: !1, source: null, searchfields: [], defaultvalue: [] }, _selectedvalue: null, _visibleitems: 0, value: function () { return "undefined" === $.type(this._selectedvalue) ? null : this._selectedvalue }, selectitem: function (a) {
        if ($.isArray(a)) {
            var b = this, d = $.grep(this.options.source.items, function (c, f) { return b._compareObjectKeys(c, a) }); 0 < d.length ? (this.element.val(d[0].label), $(this.element).find("option:first").html(d[0].label),
            this._selectedvalue = d[0]) : (this.element.val(this.options.searchprompt), $(this.element).find("option:first").html(this.options.searchprompt), this._selectedvalue = null)
        }
    }, _create: function () {
        var a = this, b = document.createElement("option"); $(b).html(a.options.searchprompt); a.element.append(b); var d = "", c; $.each(a.options.source.items, function (b, e) {
            e.category != d && null != a.options.categoryfield && (c = document.createElement("optgroup"), $(c).attr("label", e.category), a.element.append(c), d = e.category); var g = document.createElement("option");
            $(g).attr("value", b).html(e.label).attr("data-filtertext", a._getfiltertext(e)).addClass("jqmselectfilterprosearchable"); null != a.options.categoryfield ? $(c).append(g) : a.element.append(g)
        }); this.selectitem(this.options.defaultvalue); this.element.on("selectmenucreate", function (b) {
            var e, c = $(b.target); b = $("#" + c.attr("id") + "-menu"); var d = b.jqmData("filter-form"); d || (e = $("<input data-type='search'></input>"), d = $("<form style='padding-bottom:1em;'></form>").append(e), e.textinput(), b.before(d).jqmData("filter-form",
            d), d.jqmData("listview", b)); a.element.on("change", function (b) { a._selectedvalue = a.options.source.items[c.find(":selected").attr("value")]; $(this).find("option:first").html(a._selectedvalue.label) }); $("#" + c.attr("id") + "-listbox").on("popupbeforeposition", function (b, d) { $(this).find("h1").html(c.find(":selected").text()); null != a.options.categoryfield && $(this).find("ul").find("[aria-selected='true']").attr("aria-selected", !1).find("a").removeClass("ui-btn-active") }); $("#" + a.element.attr("id") + "-listbox-popup").on("popupafteropen",
            function () { $("input").focus() }); $.mobile.document.on("pagecontainerbeforeshow", function (b, c) { if (c.toPage.attr("id") == a.element.attr("id") + "-dialog") { var d, e; d = c.toPage.find("ul"); e = d.jqmData("filter-form"); c.toPage.jqmData("listview", d); d.before(e); null != a.options.categoryfield && d.find("li[aria-selected='true']").attr("aria-selected", !1).find("a").removeClass("ui-btn-active"); c.toPage.find("div.ui-title").html($("#" + a.element.attr("id")).find(":selected").text()) } }).on("pagecontainerhide", function (c,
            b) { if (b.prevPage.attr("id") == a.element.attr("id") + "-dialog") { var d, e; d = b.prevPage.jqmData("listview"); e = d.jqmData("filter-form"); d.before(e) } }).on("pagecontainershow", function (b, c) { c.toPage.attr("id") == a.element.attr("id") + "-dialog" && $("input").focus() }); c.filterable({
                input: e, children: ".jqmselectfilterprosearchable", filterCallback: function (c, b) {
                    if (0 < a.options.maxitems && a._visibleitems >= a.options.maxitems || a.options.filterReveal && "" == b) return !0; var d = -1 === ("" + ($.mobile.getAttribute(this, "filtertext") ||
                    $(this).text())).toLowerCase().indexOf(b); d || (a._visibleitems += 1); return d
                }
            }).on("filterablebeforefilter", function () { a._visibleitems = 0 }).on("filterablefilter", function () { null != a.options.categoryfield && ($("#" + c.attr("id") + "-listbox").find("li[aria-selected='true']").attr("aria-selected", !1).find("a").removeClass("ui-btn-active"), $("#" + a.element.attr("id") + "-dialog").find("li[aria-selected='true']").attr("aria-selected", !1).find("a").removeClass("ui-btn-active")) })
        }); this.element.selectmenu()
    }, _getfiltertext: function (a) {
        var b =
        ""; $.each(this.options.searchfields, function (d, c) { b += a[c] }); return b
    }, _compareObjectKeys: function (a, b) { for (var d = b.length, c = 0; c < d; c++) { var f = !0, e; for (e in b[c]) b[c].hasOwnProperty(e) && a[e] != b[c][e] && (f = !1); if (1 == f) return !0 } return !1 }
});
